2. 
(4, 3)
(3, 3)
(5, 3)
(5, 2)
(5, 1)
(6, 1)
(7, 1)
(8, 1)
(8, 2)
(6, 3)
(4, 4)
(4, 5)

4. 
(4, 3)
(4, 4)
(5, 3)
(3, 3)
(4, 5)
(6, 3)
(5, 2)
(4, 6)
(5, 5)
(5, 1)
(4, 7)
(6, 5)

/*
eval
int main () {
    Map char_map;
    int i(97);
    while (i < 123) {
        char_map.insert(static_cast<char> (i), i-97);
        i++;
    } 
    std::string pfix;
    int result(0);
    std::cout << evaluate("z+b/c", char_map, pfix, result) << std::endl;
    std::cout << result << std::endl;
    std::cout << evaluate("zz+b/c", char_map, pfix, result) << std::endl;
    char vars[] = { 'a', 'e', 'i', 'o', 'u', 'y', '#' };
    int  vals[] = {  3,  -9,   6,   2,   4,   1  };
    Map m;
    for (int k = 0; vars[k] != '#'; k++)
        m.insert(vars[k], vals[k]);
    std::string pf;
    int answer;
    assert(evaluate("a+e", m, pf, answer) == 0  &&
                            pf == "ae+"  &&  answer == -6);
    std::cout << answer << std::endl;
    
    answer = 999;
    assert(evaluate("", m, pf, answer) == 1  &&  answer == 999);
    assert(evaluate("a+", m, pf, answer) == 1  &&  answer == 999);
    assert(evaluate("a i", m, pf, answer) == 1  &&  answer == 999);
    assert(evaluate("ai", m, pf, answer) == 1  &&  answer == 999);
    assert(evaluate("()", m, pf, answer) == 1  &&  answer == 999);
    assert(evaluate("()o", m, pf, answer) == 1  &&  answer == 999);
    assert(evaluate("y(o+u)", m, pf, answer) == 1  &&  answer == 999);
    assert(evaluate("y(*o)", m, pf, answer) == 1  &&  answer == 999);
    assert(evaluate("a+E", m, pf, answer) == 1  &&  answer == 999);
    assert(evaluate("(a+(i-o)", m, pf, answer) == 1  &&  answer == 999);
      // unary operators not allowed:
    assert(evaluate("-a", m, pf, answer) == 1  &&  answer == 999);
    assert(evaluate("a*b", m, pf, answer) == 2  &&
                            pf == "ab*"  &&  answer == 999);
    assert(evaluate("y +o *(   a-u)  ", m, pf, answer) == 0  &&
                            pf == "yoau-*+"  &&  answer == -1);
    answer = 999;
    assert(evaluate("o/(y-y)", m, pf, answer) == 3  &&
                            pf == "oyy-/"  &&  answer == 999);
    assert(evaluate(" a  ", m, pf, answer) == 0  &&
                            pf == "a"  &&  answer == 3);
    assert(evaluate("((a))", m, pf, answer) == 0  &&
                            pf == "a"  &&  answer == 3);

    assert(evaluate("a", m, pf, answer) == 0 && pf == "a" && answer == 3);
    assert(evaluate("a+b", char_map, pf, answer) == 0 && pf == "ab+" &&
            answer == 1);
    assert(evaluate("a+e", m, pf, answer) == 0 && pf == "ae+" &&
            answer == -6);
    std::cout << "Passed all tests" << std::endl;
}
*/

mazequeue
int main () {
    std::string maze[10] = {
        "XXXXXXXXXX",
        "X...X..X.X",
        "X.XXX....X",
        "X.X.XXXX.X",
        "XXX......X",
        "X...X.XX.X",
        "X.X.X..X.X",
        "X.XXXX.X.X",
        "X..X...X.X",
        "XXXXXXXXXX"
    };
    /*std::cout << "BEFORE" << std::endl;
    for (int i(0); i < 10; i++) {
        std::cout << maze[i] << std::endl;
    }
    std::cout << "\n";*/

    if(pathExists(maze, 10,10, 4,3, 1,8)) 
        std::cout << "Solvable!\n" << std::endl;
    else
        std::cout << "Out of luck!\n" << std::endl;

    /*std::cout << "AFTER" << std::endl;
    for (int i(0); i < 10; i++) {
        std::cout << maze[i] << std::endl;
    }*/
}

maze stack
int main () {
    std::string maze[10] = {
        "XXXXXXXXXX",
        "X...X..X.X",
        "X.XXX....X",
        "X.X.XXXX.X",
        "XXX......X",
        "X...X.XX.X",
        "X.X.X..X.X",
        "X.XXXX.X.X",
        "X..X...X.X",
        "XXXXXXXXXX"
    };
    /*std::cout << "BEFORE" << std::endl;
    for (int i(0); i < 10; i++) {
        std::cout << maze[i] << std::endl;
    }
    std::cout << "\n";*/

    if(pathExists(maze, 10,10, 4,3, 1,8)) 
        std::cout << "Solvable!\n" << std::endl;
    else
        std::cout << "Out of luck!\n" << std::endl;

    /*std::cout << "AFTER" << std::endl;
    for (int i(0); i < 10; i++) {
        std::cout << maze[i] << std::endl;
    }*/
}

